#!/usr/bin/env node

const program = require("commander");
const fs = require("fs");
const BigNumber = require("bignumber.js");
const utils = require("jcc-moac-utils");
const Keystore = require("./jcc_moac_keystore");
const SolidityFunction = require("chain3/lib/chain3/function");
const ethers = require("ethers");
const abiCoder = ethers.utils.defaultAbiCoder;
const eth_ens_namehash = require('eth-ens-namehash');

Object.defineProperty(SolidityFunction.prototype, "call", {
  get() {
    return function() {
      return new Promise((resolve, reject) => {
        const args = Array.prototype.slice.call(arguments).filter(function(a) {
          return a !== undefined;
        });
        const defaultBlock = this.extractDefaultBlock(args);
        const payload = this.toPayload(args);
        this._mc.call(payload, defaultBlock, function(error, output) {
          if (error) return reject(error);
          return resolve(output);
        });
      });
    };
  }
});

function getBaseHome() {
  return (process.env.HOME || process.env.USERPROFILE) + "/.jcc_moac_tool";
}

program.version("0.0.18");
program.usage("--help", "Show moac_tools help");

let _description = "MOAC command line tools";
program.description(_description);

program.option("--config <config file>", "specified config file, defaut is " + getBaseHome() + "/config.json");

program.option("--wallet_create", "Create new MOAC wallet");
program.option("--save_wallet", "save wallet to keystore file when create");
program.option("--import_private_to_keystore", "import private key to keystore file");
program.option("--keystore <keystore file>", "keystore file path");
program.option("--password <keystore file password>", "keystore password");

program.option("--network <network id>", "specified MOAC network id, mainnet is 99, testnet is 101");
program.option("--server <MOAC node address>", "node rpc address");
program.option("--scsServer <MOAC scs node address>", "scs node rpc address");
program.option("--vnodeServer <MOAC vnode address>", "vnode rpc address");

program.option("--scs", "run on app chain flag");

program.option("--block <block number>", "get block info by number or latest");
program.option("--transaction <hash>", "get transaction by hash, you can use nonce of address for get transaction in subchain");
program.option("--receipt <hash>", "get transaction receipt by hash, you can use nonce of address for get transaction in subchain");

program.option("--balance <Wallet address>", "get balance of address");
program.option("--transfer <Destination address>", "destination address, source address specified by keystore or config");
program.option("--amount <amount>", "transfer amount");
program.option("--memo <memo string>", "transfer transaction memo");

program.option("--deploy <contract json file>", "deploy contract, if have parameter, set it in --parameters");

program.option("--subChain <subchain address>", "MOAC subchain address, for appChain/subChain");
program.option("--vnodeVia <vnode address>", "MOAC vnode address, for appChain/subChain");
program.option("--dappBase <dapp base address>", "DAPP base address, for appChain/subChain");

// program.option("--registerDapp <contract address>", "MOAC subchain contract address, for appChain/subChain");
program.option("--address <address>", "address parameter");

program.option("--nonce <number>", "specified nonce");
program.option("--getNonce <string>", "get current nonce by address");
program.option("--gas_price <number>", "specified gasPrice, default 20000000000");
program.option("--gas_limit <number>", "specified gas limit, default 20000");

program.option("--abi <contract json file>", "abi definition");
program.option("--contractAddr <contract address>", "contract address");

program.option("--method <string>", "specified contract method name");
program.option("--parameters <string>", "specified contract parameters which seprator by |");

program.parse(process.argv);

if (program.wallet_create) {
  if (!program.save_wallet) {
    Keystore.processCreateWallet();
  }

  Keystore.saveKeystore();

  return;
}

if (program.import_private_to_keystore) {
  Keystore.importToKeystore();
  return;
}

function getNetwork(_network) {
  let type = typeof _network;
  if (type === "number") {
    _options.network = _network;
  }
  if (type === "string") {
    _options.network = _network.toLowerCase() === "main" ? 99 : 101;
  }
}

// 获取配置文件
let _config = program.config;
let _options = { network: 99 };

// 如果文件位置没有通过参数传递
if (!!!_config) {
  _config = getBaseHome() + "/config.json";
}
if (_config.indexOf("/") == -1 && _config.indexOf("\\") == -1 && _config.indexOf(".") == -1) {
  _config = getBaseHome() + "/config." + _config + ".json";
}
if (!fs.existsSync(_config)) {
  console.log("can not get", _config, "file, create it manula!");
  process.exit();
}

// 读取文件
try {
  _options = Object.assign(_options, JSON.parse(fs.readFileSync(_config, "utf-8")));
  if (!_options.gasLimit) {
    _options.gasLimit = 20000;
  }
  if (!_options.gasPrice) {
    _options.gasPrice = 20000000000;
  }
} catch (e) {
  console.log("Parse config file fail, check and correct it", e);
  process.exit();
}

getNetwork(program.network);

if (program.keystore) {
  let keystorePath = program.keystore;
  // 兼容windows下的路径
  if (keystorePath.indexOf("/") == -1 && keystorePath.indexOf("\\") == -1) {
    keystorePath = getBaseHome() + "/" + keystorePath;
  }
  _options.wallet = Object.assign(_options.wallet, Keystore.getWalletFromKeystore(keystorePath, program.password));
}

if (!isNaN(Number(program.gas_limit))) {
  _options.gasLimit = Number(program.gas_limit);
}
if (!isNaN(Number(program.gas_price))) {
  _options.gasPrice = Number(program.gas_price);
}
if (!!program.server) {
  _options.server = program.server;
}

if (!!program.scsServer && !!program.scs) {
  _options.scsServer = program.scsServer;
}
if (!!program.vnodeServer && !!program.scs) {
  _options.vnodeServer = program.vnodeServer;
}
if (!!program.subChain && !!program.scs) {
  _options.subChain = program.subChain;
}
if (!!program.vnodeVia && !!program.scs) {
  _options.vnodeVia = program.vnodeVia;
}
if (!!program.dappBase && !!program.scs) {
  _options.dappBase = program.dappBase;
}

async function getBalance() {
  let balance;
  if (!program.scs) {
    balance = await inst.getBalance(program.balance);
  } else {
    balance = await scsInst._chain3.scs.getBalance(_options.subChain, program.balance);
  }
  console.log("balance:", balance);
}
async function getCurrentNonce(address, scs) {
  let nonce = !!scs ? await scsInst._chain3.scs.getNonce(_options.subChain, address) : await inst.getNonce(address);
  console.log("current nonce:", nonce.toString());
}

async function getBlock(block) {
  if (isNaN(block)) {
    if (block == 'earliest') {
      block = 0;
    }
    if (block == 'latest' && !!program.scs) {
      block = await scsInst._chain3.scs.getBlockNumber(_options.subChain);
    }
  }
  let info = !program.scs ? await inst.getBlock(block) : await scsInst._chain3.scs.getBlock(_options.subChain, block);
  console.log("block:", JSON.stringify(info, null, 2));
}

async function getTransaction(hash) {
  let info;
  if (!program.scs) {
    info = await inst.getTransaction(hash);
    console.log("transaction:", JSON.stringify(info, null, 2));
    return;
  }
  // 子链处理
  if (hash.indexOf("0x") == 0) {
    // hash查找
    info = await scsInst._chain3.scs.getTransactionByHash(_options.subChain, hash);
  } else {
    // nonce查找
    console.log(hash, _options.subChain, program.address);
    info = await scsInst._chain3.scs.getTransactionByNonce(_options.subChain, program.address, Number(hash));
  }
  console.log("transaction:", JSON.stringify(info, null, 2));
  return;
}

async function getTransactionReceipt(hash) {
  let info;
  if (!program.scs) {
    info = await inst.getTransactionReceipt(hash);
    console.log("transaction receipt:", JSON.stringify(info, null, 2));
    return;
  }
  // 子链处理
  if (hash.indexOf("0x") == 0) {
    // hash查找
    info = await scsInst._chain3.scs.getReceiptByHash(_options.subChain, hash);
  } else {
    // nonce查找
    info = await scsInst._chain3.scs.getReceiptByNonce(_options.subChain, program.address, Number(hash));
  }
  console.log("transaction receipt:", JSON.stringify(info, null, 2));
}
async function getNonce(address, scs) {
  if (!program.nonce) {
    let n = !!scs ? await scsInst._chain3.scs.getNonce(_options.subChain, address) : await inst.getNonce(address);
    return n;
  }
  return program.nonce;
}
async function transfer(dest, amount) {
  let nonce = await getNonce(_options.wallet.address, program.scs);
  let gasPrice = await inst.getGasPrice(_options.gasPrice);
  let memo = !program.memo ? "" : inst._chain3.toHex(program.memo);
  let tx = inst.getTx(_options.wallet.address, dest, nonce, _options.gasLimit, gasPrice, amount, memo);
  let hash = await inst.sendSignedTransaction(inst.signTransaction(tx, _options.wallet.secret));
  console.log("transfer hash:", hash);
}

const sleep = (milliseconds) => {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
};

function getFile(filename) {
  if (!fs.existsSync(filename)) {
    filename = __dirname + "/" + filename;
    if (!fs.existsSync(filename)) {
      console.log("can not find ", filename);
      process.exit();
    }
  }
  try {
    return JSON.parse(fs.readFileSync(filename, "utf-8"));
  } catch (e) {
    console.log("get file ", filename, "error", e);
    process.exit(-1);
  }
}

function getCallData(_json) {
  let constructor = _json.abi.find((item) => item.type == "constructor");
  if (!constructor) {
    console.log("Can not find constructor in file", compiledJson, ", Please check it!");
  }
  if (constructor.inputs.length > 0 && !program.parameters) {
    console.log("miss --parameter arguments");
    process.exit();
  }
  let calldata;
  if (constructor.inputs.length == 0) {
    program.parameters = [];
    calldata = _json.bytecode;
  } else {
    const typename = constructor.inputs.map((input) => input.type);
    calldata = _json.bytecode + inst._chain3.encodeParams(typename, eval("[" + program.parameters + "]"));
  }

  return calldata;
}
async function registerDapp(regDappAddr, dappOwner, dappABI) {
  if (!_options.dappBase) {
    console.log("miss dapp base address");
    process.exit();
  }
  let nonce = await getNonce(_options.wallet.address, program.scs);
  // gasPrice, gasLimit要看具体子链要求
  let gasPrice = 0;
  let gasLimit = 0;
  let calldata = _options.dappBase + inst._chain3.sha3('registerDapp(address,address,string)').substr(2, 8)
    + inst._chain3.encodeParams(['address', 'address', 'string'], [regDappAddr, dappOwner, dappABI]);
  let tx = inst.getTx(_options.wallet.address, _options.subChain, nonce, gasLimit, gasPrice, "0", calldata, _options.vnodeVia, "0x01");

  let signed = await inst.signTransaction(tx, _options.wallet.secret);
  let hash;
  try {
    hash = await inst.sendSignedTransaction(signed);
  } catch (e) {
    console.log(e);
    process.exit(-1);
  }
  console.log("registr dapp transaction hash:", hash);

}
async function deploy(compiledJson) {
  let _json = getFile(compiledJson);
  if (!_json.bytecode) {
    console.log("can not get byte code");
    process.exit(-1);
  }
  if (!_options.dappBase) {
    console.log("miss dapp base address");
    process.exit();
  }

  let calldata = getCallData(_json);

  let nonce = await getNonce(_options.wallet.address, program.scs);
  let gasPrice = !!program.scs ? 0 : await inst.getGasPrice(_options.gasPrice);
  let gasLimit = !!program.scs ? 0 : _options.gasLimit;
  let tx = inst.getTx(_options.wallet.address, !!program.scs ? _options.subChain : null, nonce, gasLimit, gasPrice, amount, calldata, !!program.scs ? _options.vnodeVia : undefined, !!program.scs ? "0x03" : undefined);
  let signed = await inst.signTransaction(tx, _options.wallet.secret);
  let hash;
  try {
    hash = await inst.sendSignedTransaction(signed);
  } catch (e) {
    console.log(e);
    process.exit(-1);
  }
  console.log("create contract transaction hash:", hash);
  console.log("waiting for contract address.......");
  for (var i = 0; i < 60; i++) {
    await sleep(2000);
    if (!program.scs) {
      let receipt = await inst.getTransactionReceipt(hash);
      if (receipt && receipt.contractAddress) {
        console.log("create contract", receipt.status == "0x1" ? "success" : "fail", "\ncontract address:", receipt.contractAddress);
        return;
      }
    } else {
      let receipt = await scsInst._chain3.scs.getReceiptByHash(_options.subChain, hash);
      if (receipt && receipt.contractAddress) {
        console.log("create contract", receipt.failed == false ? "success" : "fail", "\ncontract address:", receipt.contractAddress);

        // register dapp
        if (receipt.failed == false) {
          await registerDapp(receipt.contractAddress, _options.wallet.address, _json.bytecode);
        }
        return;
      }
    }
  }

  console.log("can not get contract address, try get transaction receipt later");
}

// 初始化连接
let inst = new utils.Moac(_options.server, _options.network == 99);
inst.initChain3();

let scsInst;
if (!!program.scs) {
  scsInst = new utils.Moac(_options.scsServer, _options.network == 99);
  scsInst.initChain3();
  // !!! 一个实例不能保持两个不同的provider!!!
  scsInst.setScs(_options.scsServer);
}

let vnodeInst;
if (!!program.scs) {
  vnodeInst = new utils.Moac(_options.vnodeServer, _options.network == 99);
  vnodeInst.initChain3();
  // !!! 一个实例不能保持两个不同的provider!!!
  vnodeInst.setScs(_options.vnodeServer);
}

if (program.block) {
  getBlock(program.block);
  return;
}

if (program.transaction) {
  getTransaction(program.transaction);
  return;
}

if (program.receipt) {
  getTransactionReceipt(program.receipt);
  return;
}

if (program.deploy) {
  deploy(program.deploy);
  return;
}

if (program.balance) {
  getBalance();
  return;
}
if (program.getNonce) {
  getCurrentNonce(program.getNonce, program.scs);
  return;
}
if (program.transfer) {
  var amount = Number(program.amount);
  if (isNaN(amount)) {
    console.log("amount is", program.amount, "invalid");
    process.exit();
  }
  transfer(program.transfer, amount);
  return;
}

function getMethodCall() {
  if (!program.parameters) {
    return 'sc.callABI("' + program.method + '")';
  }
  return 'sc.callABI("' + program.method + '",' + program.parameters + ")";
}
function getMethodCallData() {
  if (!program.parameters) {
    return 'sc.getData("' + program.method + '")';
  }
  return 'sc.getData("' + program.method + '",' + program.parameters + ")";
}

async function callContract() {
  let _json = getFile(program.abi);
  let abi = _json.abi;
  let sc = new utils.smartContract();
  sc.init(program.contractAddr, inst, abi);
  // 该变量是为用户在外部传入chain3的函数调用 eval(getMethodCall()) 时用的
  let chain3 = inst._chain3
  let namehash = eth_ens_namehash.hash

  // 确定接口类型
  const abiItem = abi.find((item) => item.name == program.method);
  if (!abiItem) {
    console.log("Can not find method", program.method, "in abi definition.");
    process.exit();
  }
  const { stateMutability } = abiItem;
  if (stateMutability === "view" || stateMutability === "pure") {
    let byte;
    if (!program.scs) {
      byte = await eval(getMethodCall());
    } else {
      console.log(_options.subChain, program.contractAddr, await eval(getMethodCallData()));
      byte = await scsInst._chain3.scs.directCall({ from: _options.wallet.address, to: _options.subChain, dappAddr: program.contractAddr, data: await eval(getMethodCallData()) });
    }
    console.log(byte);
    if (byte !== "0x") {
      const decodeData = abiCoder.decode(abiItem.outputs, byte);
      console.log("result:", JSON.stringify(decodeData, null, 2));
    } else {
      console.log("result: return empty response");
    }
  } else {
    let calldata = await eval(getMethodCall());
    // console.log(getMethodCall(), calldata);
    if (!!program.scs) {
      calldata = program.contractAddr + calldata.substr(2);
    }
    let amount = "0";
    if (program.amount) {
      amount = program.amount + "";
    }
    let nonce;
    if (!!program.nonce) {
      nonce = program.nonce;
    } else {
      nonce = await getNonce(_options.wallet.address, program.scs);
      console.log(nonce);
    }

    let tx = inst.getTx(_options.wallet.address, !!program.scs ? _options.subChain : program.contractAddr, nonce, 0, 0, amount, calldata, !!program.scs ? _options.vnodeVia : undefined, !!program.scs ? "0x1" : "0x0");
    console.log(tx);
    let signed = await inst.signTransaction(tx, _options.wallet.secret);
    let hash;
    try {
      hash = await inst.sendSignedTransaction(signed);
    } catch (e) {
      console.log(e);
      process.exit(-1);
    }

    console.log("hash:", hash);
  }
}

if (program.abi) {
  if (!program.contractAddr || !program.method) {
    console.log("Please specify contract address, method and parameters");
    process.exit();
  }
  if (!program.parameters) {
    program.parameters = "";
  }

  callContract();

  return;
}
